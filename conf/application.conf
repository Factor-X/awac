
# This is the main configuration file for the application.
# ~~~~~

java.source=1.8

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="PpTq^5gC?@ZXW`Si>iN><`SQcnxddwibPL?1GRIh5FF<PfoxtVN`[k:fvFyIkuS3"

# subcontext for JBOSS7 deployment
application.context=/

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
#db.default.driver=org.h2.Driver
#db.default.url="jdbc:h2:mem:play"
#db.default.user=sa
#db.default.password=""
#

# POSTGRES
db.default.driver=org.postgresql.Driver
db.default.url="postgres://play:play@localhost/awac"




# You can expose this datasource via JNDI if needed (Useful for JPA)
db.default.jndiName=DefaultDS
 
# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled
#applyEvolutions.default=true
 
# JPA configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
jpa.default=defaultPersistenceUnit


# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

#ebean.default="eu.factorx.awac.models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=INFO

# S3Plugin
# ~~~~~~~
# configuration for the S3Plugin, used by Heroku for the files storage

# aws.access
aws.access.key=${?AWSAccessKeyId}

# aws.secret.key
aws.secret.key=${?AWSSecretKey}

# aws.name of the bucket
aws.s3.bucket=${?AWSBuckect}

# Spring configuration
spring.context.location="components.xml"

# mail.smtp.password
# MailSMTPPassword shell variable needs to be define
# export MailSMTPPassword=givenPassword
mail.smtp.password=${?MailSMTPPassword}

# awac.hostname
# export AwacHostname
# should be define in bash variable like : <protocol>://<servername>:<port>
# example http://localhost:9000
# example https://awac-dev.herokuapp.com
awac.hostname=${?AwacHostname}

#for email templating on invitation behaviour
#awac registration url fragment
awac.registrationfragment="/registration/"
#awac verification registration url fragment
awac.verificationRegistrationFragment="/verification_registration/"
#awac registration url fragment
awac.loginfragment="/login"
#awac municipality url fragment
awac.municipalityfragment="/municipality#"
#awac enterprise url fragment
awac.enterprisefragment="/enterprise#"
#awac verification url fragment
awac.verificationfragment="/verification#"

# configure akka
akka.default-dispatcher.fork-join-executor.pool-size-max = 64
akka.actor.debug.receive = on


# max length for dto
parsers.text.maxLength=10M