/*
 *
 * Instant Play Framework
 * AWAC
 *                       
 *
 * Copyright (c) 2014 Factor-X.
 * Author Gaston Hollands
 *
 */
package eu.factorx.awac.controllers;

import java.util.*;

import play.mvc.*;
import play.data.*;
import static play.data.Form.*;
import play.*;

// for PDF
import eu.factorx.awac.util.pdf.PDF;
// for JSON
import play.libs.Json;
//for XML
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.JAXBException;

import eu.factorx.awac.views.html.administrator.*;
import eu.factorx.awac.models.*;

/**
 * Manage a database of administratros
 */
 
@Security.Authenticated(Secured.class)
public class Administrators extends Controller {
    
    /**
     * This result directly redirect to application home.
     */
    public static Result GO_HOME = redirect(
        eu.factorx.awac.controllers.routes.Administrators.list(0, "identifier", "asc", "")
    );
    
    /**
     * Handle default path requests, redirect to administrator list
     */
    public static Result index() {
        return GO_HOME;
    }

    /**
     * Display the paginated list of administrators.
     *
     * @param page Current page number (starts from 0)
     * @param sortBy Column to be sorted
     * @param order Sort order (either asc or desc)
     * @param filter Filter applied on administrators names
     */
    public static Result list(int page, String sortBy, String order, String filter) {
        return ok(
            list.render(
                Administrator.page(page, 10, sortBy, order, filter),
                sortBy, order, filter
            )
        );
    }
    
    /**
     * Display list of administrators.
	 * for PDF output
     *
     */
    public static Result asPdf() {
        return PDF.ok(document.render(Administrator.find.all()));
    }
	
	 /**
     * Display list of administrators.
	 * for JSON output
     *
     */
    public static Result asJson() {
		return ok(Json.toJson(Administrator.find.all()));
		//return TODO;
    }
	
	/**
     * Display list of administrators.
	 * for XML output
     *
     */
    public static Result asXml() {
		try {
			JAXBContext context    = JAXBContext.newInstance(Administrator.class);
			Marshaller  marshaller = context.createMarshaller();

			// Use linefeeds and indentation in the outputted XML
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
			marshaller.marshal(Administrator.find.byId(new Long(1)), System.out);
			} catch (JAXBException jaxbe) {
				play.Logger.debug("JAXB Exception : " + jaxbe);
				return(GO_HOME);
			}
		
		return ok(Json.toJson(Administrator.find.all()));
		//return TODO;
    }
    	
	
    /**
     * Display the 'edit form' of a existing Administrator.
     *
     * @param id Id of the administrator to edit
     */
    public static Result edit(Long id) {
	if (Secured.isAdministrator()) {
        Form<Administrator> administratorForm = form(Administrator.class).fill(
            Administrator.find.byId(id)
        );
        return ok(
            editForm.render(id, administratorForm)
        );
	} else {
		return forbidden();
	}
    }
    
    /**
     * Handle the 'edit form' submission 
     *
     * @param id Id of the administrator to edit
     */
    public static Result update(Long id) {
	if (Secured.isAdministrator()) {
        Form<Administrator> administratorForm = form(Administrator.class).bindFromRequest();
					
        if(administratorForm.hasErrors()) {
            return badRequest(editForm.render(id, administratorForm));
        }
		
		//Automatic binding does not work for embedded objects.
		//administratorForm.get().update(id);
		
		// use manuel settings
		// Automatic binding does not work for embedded objects.
		// use manuel binding.
		Administrator adm = administratorForm.get();
		
		// basicaly getter and setter are generated by Play
		// This gives a strange way to affect/assign data on the code
		// But play uses internally getters and setter to keep encapsulation
		play.Logger.debug("Person ID:"+adm.personId);
		play.Logger.debug("LastName:"+adm.lastname);
		play.Logger.debug("FirstName:"+adm.firstname);
		play.Logger.debug("Identifier:"+adm.identifier);
		play.Logger.debug("Password:"+adm.password);
		play.Logger.debug("Street:"+adm.address.street);
		play.Logger.debug("PostalCode:"+adm.address.postalcode);
		play.Logger.debug("City:"+adm.address.city);
		play.Logger.debug("Country:"+adm.address.country);
		
		eu.factorx.awac.models.Administrator updateAdministrator = eu.factorx.awac.models.Administrator.find.byId(id);
		updateAdministrator.identifier = adm.identifier;
		updateAdministrator.password = adm.password;
		updateAdministrator.firstname = adm.firstname;
		updateAdministrator.lastname = adm.lastname;
		updateAdministrator.email = adm.email;
		
		updateAdministrator.address.street = adm.address.street;
		updateAdministrator.address.postalcode = adm.address.postalcode;
		updateAdministrator.address.city = adm.address.city;
		updateAdministrator.address.country = adm.address.country;
				
		updateAdministrator.update();
		
        flash("success", "Administrator " + administratorForm.get().firstname + " has been updated");
        return GO_HOME;
	} else {
		return forbidden();
	}
    }
    
    /**
     * Display the 'new administrator form'.
     */
    public static Result create() {
        Form<Administrator> administratorForm = form(Administrator.class);
        return ok(
            createForm.render(administratorForm)
        );
    }
    
    /**
     * Handle the 'new administrator form' submission 
     */
    public static Result save() {
        Form<Administrator> administratorForm = form(Administrator.class).bindFromRequest();
        if(administratorForm.hasErrors()) {
            return badRequest(createForm.render(administratorForm));
        }
        administratorForm.get().save();
        flash("success", "Administrator " + administratorForm.get().firstname + " has been created");
        return GO_HOME;
    }
    
    /**
     * Handle administrator deletion
     */
    public static Result delete(Long id) {
        Administrator.find.ref(id).delete();
        flash("success", "Administrator has been deleted");
        return GO_HOME;
    }
}