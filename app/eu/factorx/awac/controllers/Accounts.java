/*
 *
 * Instant Play Framework
 * AWAC
 *                       
 *
 * Copyright (c) 2014 Factor-X.
 * Author Gaston Hollands
 *
 */
 
package eu.factorx.awac.controllers;

import static play.data.Form.form;

//for XML
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import play.data.Form;
// for JSON
import play.libs.Json;
import play.mvc.Controller;
import play.mvc.Result;
import play.mvc.Security;
import eu.factorx.awac.models.account.Account;
// for PDF
import eu.factorx.awac.util.pdf.PDF;

/**
 * Manage a database of accounts
 */
 
@Security.Authenticated(Secured.class)
public class Accounts extends Controller {
    
    /**
     * This result directly redirect to application home is user of type Account.
     * or redirects to the list of accounts if admin
     */
    public static Result GO_HOME = redirect(
    		eu.factorx.awac.controllers.routes.Accounts.list(0, "identifier", "asc", "")
    		/*
    			(eu.factorx.awac.controllers.Secured.isAdministrator()==true)?
    			(eu.factorx.awac.controllers.routes.Accounts.list(0, "identifier", "asc", "")):
    			(eu.factorx.awac.controllers.Application.index())
    		 */
    );
    
    public static Result GO_MAIN = redirect(
    		eu.factorx.awac.controllers.routes.Application.index()
    );
    
    /**
     * Handle default path requests, redirect to account list
     */
    public static Result index() {
        return GO_HOME;
    }

    /**
     * Display the paginated list of accounts.
     *
     * @param page Current page number (starts from 0)
     * @param sortBy Column to be sorted
     * @param order Sort order (either asc or desc)
     * @param filter Filter applied on accounts names
     */
    public static Result list(int page, String sortBy, String order, String filter) {
        return ok(
            list.render(
                Account.page(page, 10, sortBy, order, filter),
                sortBy, order, filter
            )
        );
    }
    
    /**
     * Display list of accounts.
	 * for PDF output
     *
     */
    public Result asPdf() {
        return PDF.ok(document.render(accountService.findAll()));
    }
	
	 /**
     * Display list of accounts.
	 * for JSON output
     *
     */
    public static Result asJson() {
		return ok(Json.toJson(Account.find.all()));
		//return TODO;
    }
	
	/**
     * Display list of accounts.
	 * for XML output
     *
     */
    public static Result asXml() {
		try {
			JAXBContext context    = JAXBContext.newInstance(Account.class);
			Marshaller  marshaller = context.createMarshaller();

			// Use linefeeds and indentation in the outputted XML
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
			marshaller.marshal(Account.find.byId(new Long(21)), System.out);
			} catch (JAXBException jaxbe) {
				play.Logger.debug("JAXB Exception : " + jaxbe);
				return(GO_HOME);
			}
		
		return ok(Json.toJson(Account.find.all()));
		//return TODO;
    }
    	
	
    /**
     * Display the 'edit form' of a existing Administrator.
     *
     * @param id Id of the account to edit
     */
    public static Result edit(Long id) {
	if (Secured.isAccount() || Secured.isAdministrator()) {
        Form<Account> accountForm = form(Account.class).fill(
            Account.find.byId(id)
        );
        return ok(
            editForm.render(id, accountForm)
        );
	} else {
		return forbidden();
	}
    }
    
    /**
     * Handle the 'edit form' submission 
     *
     * @param id Id of the account to edit
     */
    public static Result update(Long id) {
	if (Secured.isAccount() || Secured.isAdministrator()) {
        Form<Account> accountForm = form(Account.class).bindFromRequest();
					
        if(accountForm.hasErrors()) {
            return badRequest(editForm.render(id, accountForm));
        }
		
		//Automatic binding does not work for embedded objects.
		//accountForm.get().update(id);
		
		// use manuel settings
		// Automatic binding does not work for embedded objects.
		// use manuel binding.
		Account acc = accountForm.get();
		
		// basicaly getter and setter are generated by Play
		// This gives a strange way to affect/assign data on the code
		// But play uses internally getters and setter to keep encapsulation
		play.Logger.debug("Person ID:"+acc.getId());
		play.Logger.debug("LastName:"+acc.getLastname());
		play.Logger.debug("FirstName:"+acc.getFirstname());
		play.Logger.debug("Identifier:"+acc.getIdentifier());
		play.Logger.debug("Password:"+acc.getPassword());
		play.Logger.debug("Age:"+acc.getAge());
		play.Logger.debug("Status:"+acc.getAccountStatus());
		play.Logger.debug("Street:"+acc.getAddress().getStreet());
		play.Logger.debug("PostalCode:"+acc.getAddress().getPostalcode());
		play.Logger.debug("City:"+acc.getAddress().getCity());
		play.Logger.debug("Country:"+acc.getAddress().getCountry());
		play.Logger.debug("VAT number:"+acc.getVat().getVatNumber());
		play.Logger.debug("VIES verified:"+acc.getVat().getViesVerified());
		play.Logger.debug("VIES name:"+acc.getVat().getViesName());
		play.Logger.debug("VIES address:"+acc.getVat().getViesAddress());
		play.Logger.debug("VIES request date:"+acc.getVat().getViesRequestDate());
		play.Logger.debug("VIES request ID:"+acc.getVat().getViesRequestId());
		
		eu.factorx.awac.models.account.Account updateAccount = eu.factorx.awac.models.account.Account.find.byId(id);
		updateAccount.setIdentifier(acc.getIdentifier());
		updateAccount.setPassword(acc.getPassword());
		updateAccount.setFirstname(acc.getFirstname());
		updateAccount.setLastname(acc.getLastname());
		updateAccount.setEmail(acc.getEmail());
		updateAccount.setAge(acc.getAge());
		updateAccount.setAccountStatus(acc.getAccountStatus());
		
		updateAccount.getAddress().setStreet(acc.getAddress().getStreet());
		updateAccount.getAddress().setPostalcode(acc.getAddress().getPostalcode());
		updateAccount.getAddress().setCity(acc.getAddress().getCity());
		updateAccount.getAddress().setCountry(acc.getAddress().getCountry());
		
		updateAccount.getVat().setVatNumber(acc.getVat().getVatNumber());
		updateAccount.getVat().setViesVerified(acc.getVat().getViesVerified());
		updateAccount.getVat().setViesAddress(acc.getVat().getViesAddress());
		updateAccount.getVat().setViesName(acc.getVat().getViesName());
		updateAccount.getVat().setViesRequestDate(acc.getVat().getViesRequestDate());
		updateAccount.getVat().setViesRequestId(acc.getVat().getViesRequestId());
				
		updateAccount.update();
		
        flash("success", "Account " + accountForm.get().getIdentifier() + " has been updated");
        
        if (eu.factorx.awac.controllers.Secured.isAccount()) {  
        	return GO_MAIN;
        } else {
        	return GO_HOME;
        }        
	} else {
		return forbidden();
	}
    }
    
    /**
     * Display the 'new account form'.
     */
    public static Result create() {
        Form<Account> accountForm = form(Account.class);
        return ok(
            createForm.render(accountForm)
        );
    }
    
    /**
     * Handle the 'new account form' submission 
     */
    public static Result save() {
        Form<Account> accountForm = form(Account.class).bindFromRequest();
        if(accountForm.hasErrors()) {
            return badRequest(createForm.render(accountForm));
        }
        accountForm.get().save();
        flash("success", "Account " + accountForm.get().getIdentifier() + " has been created");
        
        if (eu.factorx.awac.controllers.Secured.isAccount()) {  
        	return GO_MAIN;
        } else {
        	return GO_HOME;
        }
    }
    
    /**
     * Handle account deletion
     */
    public static Result delete(Long id) {
        Account.find.ref(id).delete();
        flash("success", "Account has been deleted");
        
        if (eu.factorx.awac.controllers.Secured.isAccount()) {  
        	return GO_MAIN;
        } else {
        	return GO_HOME;
        }
    }
}