package $PACKAGE;

import com.fasterxml.jackson.databind.JsonNode;
import eu.factorx.awac.controllers.SecuredController;
import eu.factorx.awac.dto.awac.get.ProductDTO;
import eu.factorx.awac.dto.myrmex.post.ConnectionFormDTO;
import eu.factorx.awac.models.AbstractBaseModelTest;
import eu.factorx.awac.models.code.type.InterfaceTypeCode;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import play.Logger;
import play.libs.Json;
import play.mvc.Result;
import play.test.FakeRequest;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static play.test.Helpers.callAction;
import static play.test.Helpers.status;

/**
* Created by florian on 11/09/14.
*/

@ContextConfiguration(locations = {"classpath:/components-test.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class BadTest extends AbstractBaseModelTest {

    private static Long scopeId = null;

    #foreach($bad in $bads)

    @Autowired
    private BAD_${bad.getBaseActivityDataCode()}Test bad_${bad.getBaseActivityDataCode()}Test;
    #end

    @Test
    public void _000_initialize() {


    // ConnectionFormDTO
    ConnectionFormDTO cfDto = new ConnectionFormDTO("${user}", "password", InterfaceTypeCode.${calculatorType}.getKey(), "");

    /*
    start with a percentage too big => except an error

    */
    ProductDTO dto = new ProductDTO();

    dto.setName("productname");

    //Json node
    JsonNode node = Json.toJson(dto);

    // perform save
    // Fake request
    FakeRequest saveFakeRequest = new FakeRequest();
    saveFakeRequest.withHeader("Content-type", "application/json");
    saveFakeRequest.withJsonBody(node);
    saveFakeRequest.withSession(SecuredController.SESSION_IDENTIFIER_STORE, cfDto.getLogin());

    // Call controller action
    Result result = callAction(
        eu.factorx.awac.controllers.routes.ref.ProductController.create(),
        saveFakeRequest
    ); // callAction

    //analyse result
    // expecting an HTTP 200 return code
    assertEquals(200, status(result));


    //analyse result
    ProductDTO resultDTO = getDTO(result, ProductDTO.class);

    assertNotNull(resultDTO.getId());

    scopeId = resultDTO.getId();

    }
    #foreach($bad in $bads)
    @Test
    public void _00${foreach.count}_bad${bad.getBaseActivityDataCode()}() {
        bad_${bad.getBaseActivityDataCode()}Test.test(scopeId);
    }
    #end
}
