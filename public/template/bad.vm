package eu.factorx.awac.service.knowledge.activity.contributor.tps;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import eu.factorx.awac.models.code.type.*;
import eu.factorx.awac.models.data.answer.QuestionAnswer;
import eu.factorx.awac.models.data.answer.QuestionSetAnswer;
import eu.factorx.awac.models.knowledge.Unit;
import eu.factorx.awac.models.reporting.BaseActivityData;
import eu.factorx.awac.service.knowledge.activity.contributor.ActivityResultContributor;

/**
* AUTO-GENERATED by BADImportator at $DATE
* Name of the BAD : $BAD-NAME
 */
public class BaseActivityData$BAD-KEY extends ActivityResultContributor {

    @Override
    public List<BaseActivityData> getBaseActivityData(Map<QuestionCode, List<QuestionSetAnswer>> questionSetAnswers) {

        List<BaseActivityData> res = new ArrayList<>();

        //1. build unit(s) needed for
        //  - a) the BAD.unit
        //  - b) conversion

        // Get Target Unit (GJ in this case)
        // Allow finding unit by a UnitCode (unit symbole = $UNIT-SYMBOL )
        Unit baseActivityDataUnit = getUnitByCode(UnitCode.$UNIT-KEY);


        //2. build BAD

        #if($question-without-repetition.size()>0)
        //load question without repetition
        #foreach($questionWithoutRepetition in $question-without-repetition)
            List<QuestionSetAnswer> questionSetAnswers$questionWithoutRepetition.getQuestionSetString() = questionSetAnswers.get(QuestionCode.$questionWithoutRepetition.getQuestionSetString());
        #end

        //... and control
        if (
        #foreach($questionWithoutRepetition in $question-without-repetition)
            questionSetAnswers$questionWithoutRepetition.getQuestionSetString() == null || questionSetAnswers${questionWithoutRepetition.getQuestionSetString()}.size()==0 #if( $foreach.count < $question-without-repetition.size()) ||
            #end
        #end) {
        return res;
        }

        //load question
        #foreach($questionWithoutRepetition in $question-without-repetition)
        #foreach($question in $questionWithoutRepetition.getQuestionListString())
        QuestionAnswer question${question}Answer = byQuestionCode(questionSetAnswers${questionWithoutRepetition.getQuestionSetString()}.get(0).getQuestionAnswers()).get(QuestionCode.${question});
        #end
        #end
        #end

        //2.1 loop for each answer for each loop for each parents of one or more question needed by the BAD
        #foreach ($repetition in $repetitions)

            #set($repetitionCount = $foreach.count)

            #if( ${foreach.count} == 1)
                List<QuestionSetAnswer> questionSetAnswers$repetition.mainQuestionSetString = questionSetAnswers.get(QuestionCode.$repetition.mainQuestionSetString);
                //2.2 control if the list if different than null
                if (questionSetAnswers$repetition.mainQuestionSetString == null) {
                    return res;
                }
            #end

            //loop ($repetition.mainQuestionSetDescription)
            #if( ${foreach.count} == 1)
                for (QuestionSetAnswer questionSetAnswer${foreach.count} : questionSetAnswers$repetition.mainQuestionSetString) {
             #else
                 #set($lastCount = $foreach.count - 1)
                 for (QuestionSetAnswer questionSetAnswer${foreach.count} : getChildrenQuestionSetAnswers(questionSetAnswer${lastCount},QuestionCode.$repetition.mainQuestionSetString)) {
             #end

            #if ($repetition.getQuestionList().size() >0)
                //create a map for each repetition level
                Map<QuestionCode, QuestionAnswer> answersByCode${foreach.count} = byQuestionCode(questionSetAnswer${foreach.count}.getQuestionAnswers());

                //load question for this level
                #foreach ($question in $repetition.getQuestionList())
                    QuestionAnswer question${question}Answer = answersByCode${repetitionCount}.get(QuestionCode.$question);
                #end

                    //control them
                    if (#foreach ($question in $repetition.getQuestionList())
                            question${question}Answer == null #if( $foreach.count < $repetition.getQuestionList().size()) ||
                            #end
                        #end
                        ) {
                       continue;
                    }
            #end
        #end

            #if($HAS_CONDITION)
            if($CONDITION){
            #end

            //build the bad
            BaseActivityData baseActivityData = new BaseActivityData();

            baseActivityData.setKey(BaseActivityDataCode.$BAD-KEY);
            baseActivityData.setRank($RANK);
            baseActivityData.setSpecificPurpose($SPECIFIC-PURPOSE);
            baseActivityData.setActivityCategory($ACTIVITY-CATEGORY);
            baseActivityData.setActivitySubCategory($ACTIVITY-SUB-CATEGORY);
            baseActivityData.setActivityType($ACTIVITY-TYPE);

            baseActivityData.setActivitySource($ACTIVITY-SOURCE);

            baseActivityData.setActivityOwnership($ACTIVITY-OWNERSHIP);
            baseActivityData.setUnit(baseActivityDataUnit);
            baseActivityData.setValue($VALUE);
            res.add(baseActivityData);

            #if($HAS_CONDITION)
            }
            #end

         #foreach ($rep in $repetitions)
                }
         #end
        return res;
    }

}